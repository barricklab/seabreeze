import pandas as pd

path_to_data_csv=config["data"]
df = pd.read_csv(path_to_data_csv)

# Check if the csv has exactly two columns
if df.shape[1] != 2:
    raise ValueError("data.csv must have exactly two columns.")

# Check if the columns are named correctly
expected_columns = ['assembly', 'ancestor']
if list(df.columns) != expected_columns:
    raise ValueError(f"The data.csv columns must be named {expected_columns}. Found: {list(df.columns)}")

# Check if there are any duplicate entries for assemblies
if df['assembly'].duplicated().any():
    raise ValueError("There are duplicate entries in the assembly column.")

list_of_ancestors = df['ancestor'].tolist()
list_of_assemblies = df['assembly'].tolist()

for ancestor in list_of_ancestors:
    if not(ancestor in list_of_assemblies):
        raise ValueError(f"Ancestor genome {ancestor} needs a self-to-self comparison. Please append this line to data.csv: {ancestor},{ancestor}")

# this dictionary maps the subject to its query
assembly_to_ancestor_dict = dict(zip(df['assembly'], df['ancestor']))

rule all:
    input:
        files = expand("03_genomes/{sample}.fasta", sample=df['assembly'].tolist())

# ---- INDIVIDUAL RULES ----

# find unique bases at the start of the subject sequence to reindex the query sequence to

rule copy_fasta_files:
    input:
        fasta = "02_genomes/{sample}.fasta"
    output:
        outfa = "03_genomes/{sample}.fasta"
    shell:
        '''
        echo {input.fasta}
        touch {output.outfa}
        '''
