{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"seabreeze seabreeze is a tool for the comprehensive analysis of structural variant (SVs) mutations in bacterial resequencing experiments. seabreeze automates and unites several analyses into a single, easy-to-use pipeline. It uses Snakemake to manage dependencies References - Xie, Z., & Tang, H. (2017). ISEScan: Automated identification of insertion sequence elements in prokaryotic genomes. Bioinformatics, 33(21), 3340\u20133347. https://doi.org/10.1093/bioinformatics/btx433","title":"Home"},{"location":"#seabreeze","text":"seabreeze is a tool for the comprehensive analysis of structural variant (SVs) mutations in bacterial resequencing experiments. seabreeze automates and unites several analyses into a single, easy-to-use pipeline. It uses Snakemake to manage dependencies","title":"seabreeze"},{"location":"#references","text":"","title":"References"},{"location":"#-xie-z-tang-h-2017-isescan-automated-identification-of-insertion-sequence-elements-in-prokaryotic-genomes-bioinformatics-3321-33403347-httpsdoiorg101093bioinformaticsbtx433","text":"","title":"- Xie, Z., &amp; Tang, H. (2017). ISEScan: Automated identification of insertion sequence elements in prokaryotic genomes. Bioinformatics, 33(21), 3340\u20133347. https://doi.org/10.1093/bioinformatics/btx433"},{"location":"installation/","text":"Installation Requirements A UNIX-based operating system (like Linux or MacOS) with bash is recommended. This software has not been tested with the Windows shell. seabreeze requires conda >= 24.3.0 to install python packages and manage environments. We recommend Miniforge , a minimal conda installer that is similar to Miniconda . Installation seabreeze is a Snakemake workflow with associated Python scripts. Download the latest release of seabreeze from the Github Repository . Set up seabreeze only requires an intial conda environment to be set up. Navigate to the seabreeze diectory and run the following command: conda env create --name seabreeze --file bin/workflow/envs/seabreeze.yml Activate the conda environment before running the commands conda activate seabreeze You're all set! See Usage to get started. Optional By default, seabreeze creates conda environments and installs packages in the seabreeze working directory. However, if you plan to use seabreeze multiple times, or with different directories for different samples, then it can be helpful to have a common location on your system to store environments. This can save disk space and time. Create a folder for Snakemake to store conda environments. We recommend a directory in $HOME, but it could be anywhere. mkdir $HOME/snakemake_conda_envs Append this line to your ~/.bashrc , ~/.zshrc or as applicable to the shell you are using: export SNAKEMAKE_CONDA_PREFIX=$HOME/snakemake_conda_envs","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"A UNIX-based operating system (like Linux or MacOS) with bash is recommended. This software has not been tested with the Windows shell. seabreeze requires conda >= 24.3.0 to install python packages and manage environments. We recommend Miniforge , a minimal conda installer that is similar to Miniconda .","title":"Requirements"},{"location":"installation/#installation_1","text":"seabreeze is a Snakemake workflow with associated Python scripts. Download the latest release of seabreeze from the Github Repository .","title":"Installation"},{"location":"installation/#set-up","text":"seabreeze only requires an intial conda environment to be set up. Navigate to the seabreeze diectory and run the following command: conda env create --name seabreeze --file bin/workflow/envs/seabreeze.yml Activate the conda environment before running the commands conda activate seabreeze You're all set! See Usage to get started.","title":"Set up"},{"location":"installation/#optional","text":"By default, seabreeze creates conda environments and installs packages in the seabreeze working directory. However, if you plan to use seabreeze multiple times, or with different directories for different samples, then it can be helpful to have a common location on your system to store environments. This can save disk space and time. Create a folder for Snakemake to store conda environments. We recommend a directory in $HOME, but it could be anywhere. mkdir $HOME/snakemake_conda_envs Append this line to your ~/.bashrc , ~/.zshrc or as applicable to the shell you are using: export SNAKEMAKE_CONDA_PREFIX=$HOME/snakemake_conda_envs","title":"Optional"},{"location":"output/","text":"Output Analyse genome sizes This command generates data/04_rename_genome/genome_size_stats.csv as output. This csv file has the following fields: assembly: name of the assembly, as specified in data/data.csv ancestor: name of the ancestor, as specified in data/data.csv size_assembly: size of the assembly, in bp size_ancestor: size of the ancestor, in bp difference: size_assembly - size_ancestor. This value is negative percent_change: the difference in size, as a percent of the size of the assembly Here is a sample table generate from the tutorial assembly ancestor size_assembly size_ancestor difference percent_change REL606 REL606 4629812 4629812 0 0.0 REL606_evolved_1 REL606 4617111 4629812 -12701 -0.2743 REL606_evolved_2 REL606 4549910 4629812 -79902 -1.7258 REL606_evolved_3 REL606 4673209 4629812 43397 0.9373 Predict SVs mummer4 is used to perform alignments between assembly-ancestor pairs. The alignment files are stored in data/06_nucmer_alignment/<assembly>/ directories. Each of these directories contains the following files: <assembly>.delta : The all-vs-all alignment generated by the nucmer command of mummer4 <assembly>.delta.filter : The above file is filtered by the delta-filter command to only retain alignments > 95% sequence identity and > 100bp long <assembly>.filtered.coords : A file summarising information about each delta alignment in the filtered file. For specific information about these file formats, please refer to the mummer manual . Next SyRI is used to call SVs using those alignments. The output files for each assembly is in the respective data/07_syri_output/<assembly>/ directories. Each of these directories contains the following files: <assembly>syri.out : a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. <assembly>syri.vcf : a variant calling format (vcf) file describing the same SVs Raw output generated by SyRI was refined with custom python scripts to predict a minimal set of structural variants. Briefly, new insertions of individual IS elements due to transposition events were filtered out, ambiguous nomenclature for deletions was replaced with consistent terminology, falsely classified duplications were corrected, adjacent deletions were merged, and adjacent syntenic regions were merged. This filtered set of SVs is a tsv file data/07_syri_output/<assembly>/<assembly>_clean.syri.out and follows the same file format as <assembly>syri.out . Finally, a modified version of plotsr is used to generate synteny plots. Two synteny plots are generated in data/07_syri_output/<assembly>/ : <assembly>.plot.pdf : synteny plot corresponding to <assembly>syri.out <assembly>.plot.2.pdf : synteny plot corresponding to <assembly>_clean.syri.out","title":"Output"},{"location":"output/#output","text":"","title":"Output"},{"location":"output/#analyse-genome-sizes","text":"This command generates data/04_rename_genome/genome_size_stats.csv as output. This csv file has the following fields: assembly: name of the assembly, as specified in data/data.csv ancestor: name of the ancestor, as specified in data/data.csv size_assembly: size of the assembly, in bp size_ancestor: size of the ancestor, in bp difference: size_assembly - size_ancestor. This value is negative percent_change: the difference in size, as a percent of the size of the assembly Here is a sample table generate from the tutorial assembly ancestor size_assembly size_ancestor difference percent_change REL606 REL606 4629812 4629812 0 0.0 REL606_evolved_1 REL606 4617111 4629812 -12701 -0.2743 REL606_evolved_2 REL606 4549910 4629812 -79902 -1.7258 REL606_evolved_3 REL606 4673209 4629812 43397 0.9373","title":"Analyse genome sizes"},{"location":"output/#predict-svs","text":"mummer4 is used to perform alignments between assembly-ancestor pairs. The alignment files are stored in data/06_nucmer_alignment/<assembly>/ directories. Each of these directories contains the following files: <assembly>.delta : The all-vs-all alignment generated by the nucmer command of mummer4 <assembly>.delta.filter : The above file is filtered by the delta-filter command to only retain alignments > 95% sequence identity and > 100bp long <assembly>.filtered.coords : A file summarising information about each delta alignment in the filtered file. For specific information about these file formats, please refer to the mummer manual . Next SyRI is used to call SVs using those alignments. The output files for each assembly is in the respective data/07_syri_output/<assembly>/ directories. Each of these directories contains the following files: <assembly>syri.out : a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. <assembly>syri.vcf : a variant calling format (vcf) file describing the same SVs Raw output generated by SyRI was refined with custom python scripts to predict a minimal set of structural variants. Briefly, new insertions of individual IS elements due to transposition events were filtered out, ambiguous nomenclature for deletions was replaced with consistent terminology, falsely classified duplications were corrected, adjacent deletions were merged, and adjacent syntenic regions were merged. This filtered set of SVs is a tsv file data/07_syri_output/<assembly>/<assembly>_clean.syri.out and follows the same file format as <assembly>syri.out . Finally, a modified version of plotsr is used to generate synteny plots. Two synteny plots are generated in data/07_syri_output/<assembly>/ : <assembly>.plot.pdf : synteny plot corresponding to <assembly>syri.out <assembly>.plot.2.pdf : synteny plot corresponding to <assembly>_clean.syri.out","title":"Predict SVs"},{"location":"tutorial/","text":"This is a tutorial with example data for seabreeze . Please install the software, create the conda enviroment and activate it first. To get started, navigate to the root of the seabreeze directory, and copy the example/ directory: cp -r example/ data/ The newly created data/ folder should look like this: |---data/ | | | |---data.csv | |---ori_dif_sequences.csv | |---02_genomes/ | | | | | |---REL606_evolved_1.fasta | | |---REL606_evolved_2.fasta | | |---REL606.fasta For this tutorial, structural variant mutations have been simulated on the E. coli strain REL606 genome using breseq . These mutated genome assemblies are REL606_evolved_1.fasta and REL606_evolved_2.fasta . We aim to identify the structural variants in these assemblies relative to their ancestor, REL606.fasta . These pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. For more information about the valid format of this file, please see the usage page. To view this csv file: cat data/data.csv It should look like this: assembly ancestor REL606 REL606 REL606_evolved_1 REL606 REL606_evolved_2 REL606 We include a comparison of REL606 to itself as a quality check step, as we do not expect any mutations when a genome is compared to itself. All of the following commands should be run from the seabreeze root directory. Here, 4 cores have been allocated to run seabreeze but this number can be higher on lower depending on your hardware. Compute size difference between genomes This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores 4 analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see Output for more information about the fields in this table. This table should look this this: assembly ancestor size_assembly size_ancestor difference percent_change REL606 REL606 4629812 4629812 0 0.0 REL606_evolved_1 REL606 4617111 4629812 -12701 -0.2743 REL606_evolved_2 REL606 4549910 4629812 -79902 -1.7258 As we expected, there is no size difference when REL606 is compared to itself. We can see that both of the assemblies REL606_evolved_1 and REL606_evolved_2 are smaller than the ancestor. Predict the location of insertion sequences This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores 4 predict_IS_elements All of the output generated is stored in data/05_isescan_tables/ . This tutorial should generate the following files in this directory: |---05_isescan_tables/ | | | |---REL606.csv | |---REL606_evolved_1.csv | |---REL606_evolved_2.csv | |---REL606/ | |---REL606_evolved_1/ | |---REL606_evolved_2/ Each assembly has a .csv file that describes the locations of IS elements in that genome, and a directory where the additionally files generated by ISEScan are made. For information about interpreting this csv file, we refer users to the official ISEScan documentation .","title":"Tutorial"},{"location":"tutorial/#compute-size-difference-between-genomes","text":"This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores 4 analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see Output for more information about the fields in this table. This table should look this this: assembly ancestor size_assembly size_ancestor difference percent_change REL606 REL606 4629812 4629812 0 0.0 REL606_evolved_1 REL606 4617111 4629812 -12701 -0.2743 REL606_evolved_2 REL606 4549910 4629812 -79902 -1.7258 As we expected, there is no size difference when REL606 is compared to itself. We can see that both of the assemblies REL606_evolved_1 and REL606_evolved_2 are smaller than the ancestor.","title":"Compute size difference between genomes"},{"location":"tutorial/#predict-the-location-of-insertion-sequences","text":"This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores 4 predict_IS_elements All of the output generated is stored in data/05_isescan_tables/ . This tutorial should generate the following files in this directory: |---05_isescan_tables/ | | | |---REL606.csv | |---REL606_evolved_1.csv | |---REL606_evolved_2.csv | |---REL606/ | |---REL606_evolved_1/ | |---REL606_evolved_2/ Each assembly has a .csv file that describes the locations of IS elements in that genome, and a directory where the additionally files generated by ISEScan are made. For information about interpreting this csv file, we refer users to the official ISEScan documentation .","title":"Predict the location of insertion sequences"},{"location":"usage/","text":"Preparing input Assuming you have completed installation , you can now prepare input files for analysis. At its core seabreeze is designed for bacterial resequencing experiments, and therefore predicts mutations between reference-query pairs, where the reference sequence is referred to as an ancestor and the query sequence being compared to is called the assembly . This nomenclature is use throughout the documentation and the software. seabreeze requires FASTA files for all of the bacterial genomes being analysed. These FASTA files should only contain a single contig for the full-length genome. It should not contain additional entries for plasmids. seabreeze works best with genome assemblies generated from long-read sequencing as these can capture structural variants that occur between repeat sequences. It also does not work well for comparing genomes with high sequence/ phylogenetic divergence (for example between different bacterial species). All of the input/output of the analysis is stored in data/ . The pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. Populate the csv file with the ancestor-assembly pairs you wish to analyse. For example: assembly ancestor genome1 genome2 genome3 genome4 Place the corresponding FASTA files for these genomes in 02_genomes . seabreeze expects that these file names to match, and contain the extension .fasta . Therefore, for this example, the data/ directory should look like this: seabreeze | |---data/ | | | |---data.csv | |---02_genomes/ | | | | | |---genome1.fasta | | |---genome2.fasta | | |---genome3.fasta | | |---genome4.fasta Note that many assemblies can use the same ancestor, but the same assembly cannot use many ancestors: For example, this is fine: assembly ancestor genome1 genome2 genome3 genome2 This will cause a fatal error: assembly ancestor genome1 genome2 genome1 genome3 It is also a good idea to set up a comparison of the ancestor genomes to themselves. This can be a good quality control step, as we do not expect the pipeline to predict any mutations in a genome relative to itself. The following table demonstrates an implementation of this: assembly ancestor genome1 genome2 genome3 genome4 genome2 genome2 genome4 genome4 Some commands ahead may require additional input, and will be specified in respective sections. Commands All of the seabreeze commands take the following format and should be executed from the seabreeze root directory: snakemake --use-conda --cores n <command> Where n is the number of cores to be used to execute the command. Following sections describe commands that can be used. Additional flags can be added to this command and are detailed in 'Additional Options'. Analyse genome sizes This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores n analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see output for more information about the fields in this table, and the tutorial for a sample. Find insertion sequences This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores 4 predict_IS_elements This command primarily generates a series of csv files data/05_isescan_tables/<assembly>.csv , with each csv file corresponding to an assembly in data/data.csv . ISEScan also generates additional output for each assembly, which is stored in their respective directories data/05_iescan_tables/<assembly>/ . For information about interpreting this csv file, we refer users to the official ISEScan documentation . Predict SVs This command aligns the assembly-ancestor pairs, predicts structural variants and generates synteny plots. snakemake --use-conda --cores 4 predict_structural_variants data/07_syri_output/<assembly>/<assembly>_clean.syri.out is a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. data/07_syri_output/<assembly>/<assembly>.plot.2.pdf is a synteny plot of the rearrangements in the above tsv file. This command also generates other files. Please see the output page. Tip: The 4th and 5th columns of the <assembly>_clean.syri.out file have the reference/query sequences for indels. For large deletions, these field can have thousands of bases. To view this tsv file in the terminal without these columns, try running cat <assembly>_clean.syri.out | cut --complement -f 4-5 Additional Snakemake options","title":"Usage"},{"location":"usage/#preparing-input","text":"Assuming you have completed installation , you can now prepare input files for analysis. At its core seabreeze is designed for bacterial resequencing experiments, and therefore predicts mutations between reference-query pairs, where the reference sequence is referred to as an ancestor and the query sequence being compared to is called the assembly . This nomenclature is use throughout the documentation and the software. seabreeze requires FASTA files for all of the bacterial genomes being analysed. These FASTA files should only contain a single contig for the full-length genome. It should not contain additional entries for plasmids. seabreeze works best with genome assemblies generated from long-read sequencing as these can capture structural variants that occur between repeat sequences. It also does not work well for comparing genomes with high sequence/ phylogenetic divergence (for example between different bacterial species). All of the input/output of the analysis is stored in data/ . The pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. Populate the csv file with the ancestor-assembly pairs you wish to analyse. For example: assembly ancestor genome1 genome2 genome3 genome4 Place the corresponding FASTA files for these genomes in 02_genomes . seabreeze expects that these file names to match, and contain the extension .fasta . Therefore, for this example, the data/ directory should look like this: seabreeze | |---data/ | | | |---data.csv | |---02_genomes/ | | | | | |---genome1.fasta | | |---genome2.fasta | | |---genome3.fasta | | |---genome4.fasta Note that many assemblies can use the same ancestor, but the same assembly cannot use many ancestors: For example, this is fine: assembly ancestor genome1 genome2 genome3 genome2 This will cause a fatal error: assembly ancestor genome1 genome2 genome1 genome3 It is also a good idea to set up a comparison of the ancestor genomes to themselves. This can be a good quality control step, as we do not expect the pipeline to predict any mutations in a genome relative to itself. The following table demonstrates an implementation of this: assembly ancestor genome1 genome2 genome3 genome4 genome2 genome2 genome4 genome4 Some commands ahead may require additional input, and will be specified in respective sections.","title":"Preparing input"},{"location":"usage/#commands","text":"All of the seabreeze commands take the following format and should be executed from the seabreeze root directory: snakemake --use-conda --cores n <command> Where n is the number of cores to be used to execute the command. Following sections describe commands that can be used. Additional flags can be added to this command and are detailed in 'Additional Options'.","title":"Commands"},{"location":"usage/#analyse-genome-sizes","text":"This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores n analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see output for more information about the fields in this table, and the tutorial for a sample.","title":"Analyse genome sizes"},{"location":"usage/#find-insertion-sequences","text":"This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores 4 predict_IS_elements This command primarily generates a series of csv files data/05_isescan_tables/<assembly>.csv , with each csv file corresponding to an assembly in data/data.csv . ISEScan also generates additional output for each assembly, which is stored in their respective directories data/05_iescan_tables/<assembly>/ . For information about interpreting this csv file, we refer users to the official ISEScan documentation .","title":"Find insertion sequences"},{"location":"usage/#predict-svs","text":"This command aligns the assembly-ancestor pairs, predicts structural variants and generates synteny plots. snakemake --use-conda --cores 4 predict_structural_variants data/07_syri_output/<assembly>/<assembly>_clean.syri.out is a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. data/07_syri_output/<assembly>/<assembly>.plot.2.pdf is a synteny plot of the rearrangements in the above tsv file. This command also generates other files. Please see the output page. Tip: The 4th and 5th columns of the <assembly>_clean.syri.out file have the reference/query sequences for indels. For large deletions, these field can have thousands of bases. To view this tsv file in the terminal without these columns, try running cat <assembly>_clean.syri.out | cut --complement -f 4-5","title":"Predict SVs"},{"location":"usage/#additional-snakemake-options","text":"","title":"Additional Snakemake options"}]}