{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"seabreeze seabreeze is a tool for the comprehensive analysis of structural variant (SV) mutations in bacterial resequencing experiments; it automates and unites several analyses into a single, easy-to-use pipeline. seabreeze uses a combination of existing packages and custom scripts, with Snakemake to manage dependencies and the workflow. To get started, please refer to the installation . For an overview of the commands, please see usage . Each command can generate several output files, however most users will usually only find a subset of them relevant. These have been highlighted in the usage itself. A more extensive documentation of the other output files is on the output page. Wherever the output corresponds to a file type/format from an existing package, the user is redirected to the respective package's documentation. Wherever the output corresponds a new file format specific to seabreeze , it is described on the output page. If you would like to learn how to use seabreeze , give the tutorial a try. seabreeze is available under the MIT License, and source code is on GitHub . If you have any questions, want to report bugs/error or submit a request for a new feature, please start a new GitHub issue . See other software to analyse bacterial genomes from the Barrick Lab at the University of Texas at Austin Contact the creators at irazibbu@utexas.edu or jbarrick@cm.utexas.edu.","title":"Home"},{"location":"#seabreeze","text":"seabreeze is a tool for the comprehensive analysis of structural variant (SV) mutations in bacterial resequencing experiments; it automates and unites several analyses into a single, easy-to-use pipeline. seabreeze uses a combination of existing packages and custom scripts, with Snakemake to manage dependencies and the workflow. To get started, please refer to the installation . For an overview of the commands, please see usage . Each command can generate several output files, however most users will usually only find a subset of them relevant. These have been highlighted in the usage itself. A more extensive documentation of the other output files is on the output page. Wherever the output corresponds to a file type/format from an existing package, the user is redirected to the respective package's documentation. Wherever the output corresponds a new file format specific to seabreeze , it is described on the output page. If you would like to learn how to use seabreeze , give the tutorial a try. seabreeze is available under the MIT License, and source code is on GitHub . If you have any questions, want to report bugs/error or submit a request for a new feature, please start a new GitHub issue . See other software to analyse bacterial genomes from the Barrick Lab at the University of Texas at Austin Contact the creators at irazibbu@utexas.edu or jbarrick@cm.utexas.edu.","title":"seabreeze"},{"location":"installation/","text":"Installation Requirements A UNIX-based operating system (like Linux or MacOS) with bash is recommended. This software has not been tested with the Windows shell. seabreeze requires conda >= 24.3.0 to install python packages and manage environments. We recommend Miniforge , a minimal conda installer that is similar to Miniconda . Installation seabreeze is a Snakemake workflow with associated Python scripts. Download the latest release of seabreeze from the Github Repository . Set up seabreeze only requires an intial conda environment to be set up. Navigate to the seabreeze diectory and run the following command: conda env create --name seabreeze --file bin/workflow/envs/seabreeze.yml Activate the conda environment before running the commands conda activate seabreeze You're all set! See Usage to get started. Optional By default, seabreeze creates conda environments and installs packages in the seabreeze working directory. However, if you plan to use seabreeze multiple times, or with different directories for different samples, then it can be helpful to have a common location on your system to store environments. This can save disk space and time. Create a folder for Snakemake to store conda environments. We recommend a directory in $HOME, but it could be anywhere. mkdir $HOME/snakemake_conda_envs Append this line to your ~/.bashrc , ~/.zshrc or as applicable to the shell you are using, using the path to the directory created in the previous step. export SNAKEMAKE_CONDA_PREFIX=$HOME/snakemake_conda_envs","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"A UNIX-based operating system (like Linux or MacOS) with bash is recommended. This software has not been tested with the Windows shell. seabreeze requires conda >= 24.3.0 to install python packages and manage environments. We recommend Miniforge , a minimal conda installer that is similar to Miniconda .","title":"Requirements"},{"location":"installation/#installation_1","text":"seabreeze is a Snakemake workflow with associated Python scripts. Download the latest release of seabreeze from the Github Repository .","title":"Installation"},{"location":"installation/#set-up","text":"seabreeze only requires an intial conda environment to be set up. Navigate to the seabreeze diectory and run the following command: conda env create --name seabreeze --file bin/workflow/envs/seabreeze.yml Activate the conda environment before running the commands conda activate seabreeze You're all set! See Usage to get started.","title":"Set up"},{"location":"installation/#optional","text":"By default, seabreeze creates conda environments and installs packages in the seabreeze working directory. However, if you plan to use seabreeze multiple times, or with different directories for different samples, then it can be helpful to have a common location on your system to store environments. This can save disk space and time. Create a folder for Snakemake to store conda environments. We recommend a directory in $HOME, but it could be anywhere. mkdir $HOME/snakemake_conda_envs Append this line to your ~/.bashrc , ~/.zshrc or as applicable to the shell you are using, using the path to the directory created in the previous step. export SNAKEMAKE_CONDA_PREFIX=$HOME/snakemake_conda_envs","title":"Optional"},{"location":"output/","text":"Output Analyse genome sizes This command generates data/04_rename_genome/genome_size_stats.csv as output. This csv file has the following fields: assembly : name of the assembly, as specified in data/data.csv ancestor : name of the ancestor, as specified in data/data.csv size_assembly : size of the assembly, in bp size_ancestor : size of the ancestor, in bp difference : size_assembly - size_ancestor. This value is negative when the ancestor is larger than the assembly percent_change : the difference in size, as a percent of the size of the assembly See a sample table in the tutorial . Predict SVs mummer4 is used to perform alignments between assembly-ancestor pairs. The alignment files are stored in data/06_nucmer_alignment/<assembly>/ directories. Each of these directories contains the following files: <assembly>.delta : The all-vs-all alignment generated by the nucmer command of mummer4 <assembly>.delta.filter : The <assembly>.delta file is filtered by the delta-filter command to only retain alignments > 95% sequence identity and > 100bp long. <assembly>.filtered.coords : A file summarising information about each delta alignment in the filtered file. For specific information about these file formats, please refer to the mummer manual . Next SyRI is used to call SVs using those alignments. The output files for each assembly is in the respective data/07_syri_output/<assembly>/ directories. Each of these directories contains the following files: <assembly>syri.out : a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. You may notice that the reference and query chromosome ID read as \"genome\". This is because SyRI attempts to call variants between homologous chromosomes, and hence expects the reference and query ID to be the same string. To prevent this error from occurring, the genomes are renamed to a placeholder string 'genome'. You may also see that for a deletion, the query start and stop site are the same. You can also find a sample table in the tutorial . <assembly>syri.vcf : a variant calling format (vcf) file describing the same SVs Raw output generated by SyRI was refined with custom python scripts to predict a minimal set of structural variants. Briefly, new insertions of individual IS elements due to transposition events were filtered out, ambiguous nomenclature for deletions was replaced with consistent terminology, falsely classified duplications were corrected, adjacent deletions were merged, and adjacent syntenic regions were merged. This filtered set of SVs is a tsv file data/07_syri_output/<assembly>/<assembly>_clean.syri.out and follows the same file format as <assembly>syri.out . Finally, a modified version of plotsr is used to generate synteny plots. Two synteny plots are generated in data/07_syri_output/<assembly>/ : <assembly>.plot.pdf : synteny plot corresponding to the SVs in <assembly>syri.out <assembly>.plot.2.pdf : synteny plot corresponding to SVs in <assembly>_clean.syri.out Tip: The 4th and 5th columns of the <assembly>_clean.syri.out file have the reference/query sequences for indels. For large deletions, these field can have thousands of bases. To view this tsv file in the terminal without these columns, try running cat <assembly>_clean.syri.out | cut --complement -f 4-5 Note: SyRI sometimes fails to correctly identify copy number variation (deletions and amplifications) or more complex rearrangements (such as overlapping inversions). Annotate genes in SVs This command uses prokka annotate genes in the assemblies and combines insertion sequence ore and generates GFF files for each in data/09_annotated_genomes/<assembly>/<assembly>.gff . Next, breseq uses these GFF files to annotate the genes present in the deletions, inversions and amplifications. This step produces two outputs for each assembly: data/12_genome_diff_tables/gd/<assembly>.gd : This is a GenomeDiff format that is a tsv file describing the locations, size and types of SVs. Please see the breseq documentation for more information about this file format. data/12_genome_diff_tables/html/<assembly>.html : This is an html, human-readable version of the GenomeDiff file that contains the names of the genes contained in the SV regions. For an example of this table, please see the tutorial . For information about the columns in this table, please see the breseq documentation. Predict SV mechanism This command annotates the insertion sequences at the boundaries of structural variants (for deletions and inversions only) and predicts putative mechanisms. All of the output from this step is in the directory data/11_annotated_boundaries/ . Each assembly has three files associated with it: data/11_annotated_boundaries/<assembly>_boundaries.csv : This csv file annotates insertion sequences that are within a threshold distance of the start and end sites of a structural variant. The threshold has arbitrarily been set to 20bp. This csv file has the following columns. Note: For deletions, the query_start and query_stop coordinates will be of the same length. Additionally, the distances can be positive or negative, depending on if the insertion sequence starts/ends before or after that edge of the SV. ref_start : Start site of the SV in the ancestor ref_stop : Stop site of the SV in the ancestor query_start : Start site of the SV in the assembly query_stop : Stop site of the SV in the aseembly tag_3 : Type of SV. This follows the SyRI nomenclature (SYN: syntenic region, INV: inversion, DUP: duplication, TRANS: translocation, DEL: deletion) L_ref : Name of insertion sequence within threshold distance of the start site of the SV in the ancestor. This is 'NA' if none is found. L_ref_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the ancestor. R_ref : Name of insertion sequence within threshold distance of the stop site of the SV in the ancestor. This is 'NA' if none is found. R_ref_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the ancestor. L_query : Name of insertion sequence within threshold distance of the start site of the SV in the assembly. This is 'NA' if none is found. L_query_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the assembly. R_query : Name of insertion sequence within threshold distance of the stop site of the SV in the assembly. This is 'NA' if none is found. R_query_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the assembly. data/11_annotated_boundaries/<assembly>_deletion.csv : This file contains the same fields as above, with two additional columns. These columns describe the various configurations in which insertion sequences can flank a deletion. Mechanism : This field can take on values of 'between_IS' (when a deletion occurs between two IS elements that were already present in the ancestor), 'IS_mediated' (when only one or none of the implicated IS elements were present in the ancestor) and 'other' (through recombination between other repeats or illegitimate recombination) Evidence : This field can take on values of 'full', 'evolved', 'incomplete' or 'NA'. The following image describes the different configurations in which insertion sequences can be present around a deletion, and the mechanism and evidence that is assigned on that basis. The red arrow depicts the region that was deleted, and the blue boxes indicate insertion sequences. data/11_annotated_boundaries/<assembly>_inversion.csv : This file describes the various configurations in which insertion sequences can flank an inversion. It contains the same columns as the above file. The following image describes the different configurations in which insertion sequences can be present around an inversion, and the mechanism and evidence that is assigned on that basis. The orange arrow depicts the region that was inverted, and the blue boxes indicate insertion sequences. Additionally, this command generates two summary files: data/11_annotated_boundaries/deletion_mechanism.csv and data/11_annotated_boundaries/inversion_mechanism.csv . They contain information about the mechanism of deletions and inversions respectively, for all of the assemblies. Both these files have the same fields: clone : name of the assembly total : total number of inversions or deletions between_IS : number of inversions or deletions that whose mechanism was 'between_IS' IS_mediated : number of inversions or deletions that whose mechanism was 'IS_mediated' other : number of inversions or deletions whose mechanism was through recombination between other repeats or illegitimate recombination For examples of all of these tables, please see the tutorial . Predict replichore and inversion balance This command analyses the length of the two replichores of each assembly, and classifies inversion as inter-replichore or intra-replichore. It produces the following output: data/08_reindex_genome_oric/replichore_arms.csv : a csv file that describes the length of the two replichores for all of the assemblies. It contains the following fields: clone : Name of the assembly ori : Location of the oriC sequence. You may notice that this is 0 for all of the assemblies. This is because the circular genomes have been rotated for this step to start at the oriC to normalise it. dif : Location of the dif sequence. This coordinate represents the first base at which the supplied dif site starts. length : Total length of the genome of the ancestor arm_1 : Length of one replichore (in this case, the distance in bp from the oriC to the dif site) arm_2 : Length of the other replichore (in this case, the distance in bp from the dif site to end of the genome) ratio : The ratio of the longer arm to the shorter arm. This value should be >=1 percent : The percent of the total length of the genome contained in the longer arm. For a perfectly balanced genome, this value is 50 and gets larger as the genome gets more imbalanced. It is never less than 50. data/11_annotated_boundaries/inversion_replichores.csv : a csv file that tallies the count of each type of inversion (inter-replichore vs intra-replichore) for all of the assemblies. clone : Name of the assembly total_inversions : Total number of inversions detected in that assembly. This is the sum of the total_inter_replichore and total_intra_replichore . across_ori : Number of inversions that were across the oriC site across_dif : Number of inversions that were across the dif site total_inter_replichore : Total number of inter-replichore inversions. This is the sum of across_ori and across_dif total_intra_replichore : Total number of inter-replichore inversions. data/11_annotated_boundaries/<assembly>_inversion_classification.csv : a csv file that has more detailed information about all of the inversions in a given assembly. It has the same fields as data/11_annotated_boundaries/<assembly>_inversion.csv (see Predict SV mechanism ), with three additional fields: classification : Describes the type of inversion, and takes on values 'across_ori', 'across_dif', 'intra_replichore'. length : Length of the inversion in bp. symmetry_percent : The percent of the total length of the inversion contained in the longer arm. For a perfectly symmetric inversion, this value is 50 and gets larger as the inversion gets more asymmetric. It is never less than 50. data/11_annotated_boundaries/inversion_replichores_long.csv : a csv file that contains a list of all inversions across all assemblies. It contains the following fields: clone : Name of the assembly classification : Describes the type of inversion, and takes on values 'across_ori', 'across_dif', 'intra_replichore'. length : Length of the inversion in bp. mechanism : Putative mechanism of the inversion, and takes on values 'between_IS', 'IS_mediated' and 'other' See Predict SV mechanism above. symmetry_percent : The percent of the total length of the inversion contained in the longer arm. For a perfectly symmetric inversion, this value is 50 and gets larger as the inversion gets more asymmetric. It is never less than 50.","title":"Output"},{"location":"output/#output","text":"","title":"Output"},{"location":"output/#analyse-genome-sizes","text":"This command generates data/04_rename_genome/genome_size_stats.csv as output. This csv file has the following fields: assembly : name of the assembly, as specified in data/data.csv ancestor : name of the ancestor, as specified in data/data.csv size_assembly : size of the assembly, in bp size_ancestor : size of the ancestor, in bp difference : size_assembly - size_ancestor. This value is negative when the ancestor is larger than the assembly percent_change : the difference in size, as a percent of the size of the assembly See a sample table in the tutorial .","title":"Analyse genome sizes"},{"location":"output/#predict-svs","text":"mummer4 is used to perform alignments between assembly-ancestor pairs. The alignment files are stored in data/06_nucmer_alignment/<assembly>/ directories. Each of these directories contains the following files: <assembly>.delta : The all-vs-all alignment generated by the nucmer command of mummer4 <assembly>.delta.filter : The <assembly>.delta file is filtered by the delta-filter command to only retain alignments > 95% sequence identity and > 100bp long. <assembly>.filtered.coords : A file summarising information about each delta alignment in the filtered file. For specific information about these file formats, please refer to the mummer manual . Next SyRI is used to call SVs using those alignments. The output files for each assembly is in the respective data/07_syri_output/<assembly>/ directories. Each of these directories contains the following files: <assembly>syri.out : a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. You may notice that the reference and query chromosome ID read as \"genome\". This is because SyRI attempts to call variants between homologous chromosomes, and hence expects the reference and query ID to be the same string. To prevent this error from occurring, the genomes are renamed to a placeholder string 'genome'. You may also see that for a deletion, the query start and stop site are the same. You can also find a sample table in the tutorial . <assembly>syri.vcf : a variant calling format (vcf) file describing the same SVs Raw output generated by SyRI was refined with custom python scripts to predict a minimal set of structural variants. Briefly, new insertions of individual IS elements due to transposition events were filtered out, ambiguous nomenclature for deletions was replaced with consistent terminology, falsely classified duplications were corrected, adjacent deletions were merged, and adjacent syntenic regions were merged. This filtered set of SVs is a tsv file data/07_syri_output/<assembly>/<assembly>_clean.syri.out and follows the same file format as <assembly>syri.out . Finally, a modified version of plotsr is used to generate synteny plots. Two synteny plots are generated in data/07_syri_output/<assembly>/ : <assembly>.plot.pdf : synteny plot corresponding to the SVs in <assembly>syri.out <assembly>.plot.2.pdf : synteny plot corresponding to SVs in <assembly>_clean.syri.out Tip: The 4th and 5th columns of the <assembly>_clean.syri.out file have the reference/query sequences for indels. For large deletions, these field can have thousands of bases. To view this tsv file in the terminal without these columns, try running cat <assembly>_clean.syri.out | cut --complement -f 4-5 Note: SyRI sometimes fails to correctly identify copy number variation (deletions and amplifications) or more complex rearrangements (such as overlapping inversions).","title":"Predict SVs"},{"location":"output/#annotate-genes-in-svs","text":"This command uses prokka annotate genes in the assemblies and combines insertion sequence ore and generates GFF files for each in data/09_annotated_genomes/<assembly>/<assembly>.gff . Next, breseq uses these GFF files to annotate the genes present in the deletions, inversions and amplifications. This step produces two outputs for each assembly: data/12_genome_diff_tables/gd/<assembly>.gd : This is a GenomeDiff format that is a tsv file describing the locations, size and types of SVs. Please see the breseq documentation for more information about this file format. data/12_genome_diff_tables/html/<assembly>.html : This is an html, human-readable version of the GenomeDiff file that contains the names of the genes contained in the SV regions. For an example of this table, please see the tutorial . For information about the columns in this table, please see the breseq documentation.","title":"Annotate genes in SVs"},{"location":"output/#predict-sv-mechanism","text":"This command annotates the insertion sequences at the boundaries of structural variants (for deletions and inversions only) and predicts putative mechanisms. All of the output from this step is in the directory data/11_annotated_boundaries/ . Each assembly has three files associated with it: data/11_annotated_boundaries/<assembly>_boundaries.csv : This csv file annotates insertion sequences that are within a threshold distance of the start and end sites of a structural variant. The threshold has arbitrarily been set to 20bp. This csv file has the following columns. Note: For deletions, the query_start and query_stop coordinates will be of the same length. Additionally, the distances can be positive or negative, depending on if the insertion sequence starts/ends before or after that edge of the SV. ref_start : Start site of the SV in the ancestor ref_stop : Stop site of the SV in the ancestor query_start : Start site of the SV in the assembly query_stop : Stop site of the SV in the aseembly tag_3 : Type of SV. This follows the SyRI nomenclature (SYN: syntenic region, INV: inversion, DUP: duplication, TRANS: translocation, DEL: deletion) L_ref : Name of insertion sequence within threshold distance of the start site of the SV in the ancestor. This is 'NA' if none is found. L_ref_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the ancestor. R_ref : Name of insertion sequence within threshold distance of the stop site of the SV in the ancestor. This is 'NA' if none is found. R_ref_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the ancestor. L_query : Name of insertion sequence within threshold distance of the start site of the SV in the assembly. This is 'NA' if none is found. L_query_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the assembly. R_query : Name of insertion sequence within threshold distance of the stop site of the SV in the assembly. This is 'NA' if none is found. R_query_distance : Distance of the closest end of the insertion sequence from the start site of the SV in the assembly. data/11_annotated_boundaries/<assembly>_deletion.csv : This file contains the same fields as above, with two additional columns. These columns describe the various configurations in which insertion sequences can flank a deletion. Mechanism : This field can take on values of 'between_IS' (when a deletion occurs between two IS elements that were already present in the ancestor), 'IS_mediated' (when only one or none of the implicated IS elements were present in the ancestor) and 'other' (through recombination between other repeats or illegitimate recombination) Evidence : This field can take on values of 'full', 'evolved', 'incomplete' or 'NA'. The following image describes the different configurations in which insertion sequences can be present around a deletion, and the mechanism and evidence that is assigned on that basis. The red arrow depicts the region that was deleted, and the blue boxes indicate insertion sequences. data/11_annotated_boundaries/<assembly>_inversion.csv : This file describes the various configurations in which insertion sequences can flank an inversion. It contains the same columns as the above file. The following image describes the different configurations in which insertion sequences can be present around an inversion, and the mechanism and evidence that is assigned on that basis. The orange arrow depicts the region that was inverted, and the blue boxes indicate insertion sequences. Additionally, this command generates two summary files: data/11_annotated_boundaries/deletion_mechanism.csv and data/11_annotated_boundaries/inversion_mechanism.csv . They contain information about the mechanism of deletions and inversions respectively, for all of the assemblies. Both these files have the same fields: clone : name of the assembly total : total number of inversions or deletions between_IS : number of inversions or deletions that whose mechanism was 'between_IS' IS_mediated : number of inversions or deletions that whose mechanism was 'IS_mediated' other : number of inversions or deletions whose mechanism was through recombination between other repeats or illegitimate recombination For examples of all of these tables, please see the tutorial .","title":"Predict SV mechanism"},{"location":"output/#predict-replichore-and-inversion-balance","text":"This command analyses the length of the two replichores of each assembly, and classifies inversion as inter-replichore or intra-replichore. It produces the following output: data/08_reindex_genome_oric/replichore_arms.csv : a csv file that describes the length of the two replichores for all of the assemblies. It contains the following fields: clone : Name of the assembly ori : Location of the oriC sequence. You may notice that this is 0 for all of the assemblies. This is because the circular genomes have been rotated for this step to start at the oriC to normalise it. dif : Location of the dif sequence. This coordinate represents the first base at which the supplied dif site starts. length : Total length of the genome of the ancestor arm_1 : Length of one replichore (in this case, the distance in bp from the oriC to the dif site) arm_2 : Length of the other replichore (in this case, the distance in bp from the dif site to end of the genome) ratio : The ratio of the longer arm to the shorter arm. This value should be >=1 percent : The percent of the total length of the genome contained in the longer arm. For a perfectly balanced genome, this value is 50 and gets larger as the genome gets more imbalanced. It is never less than 50. data/11_annotated_boundaries/inversion_replichores.csv : a csv file that tallies the count of each type of inversion (inter-replichore vs intra-replichore) for all of the assemblies. clone : Name of the assembly total_inversions : Total number of inversions detected in that assembly. This is the sum of the total_inter_replichore and total_intra_replichore . across_ori : Number of inversions that were across the oriC site across_dif : Number of inversions that were across the dif site total_inter_replichore : Total number of inter-replichore inversions. This is the sum of across_ori and across_dif total_intra_replichore : Total number of inter-replichore inversions. data/11_annotated_boundaries/<assembly>_inversion_classification.csv : a csv file that has more detailed information about all of the inversions in a given assembly. It has the same fields as data/11_annotated_boundaries/<assembly>_inversion.csv (see Predict SV mechanism ), with three additional fields: classification : Describes the type of inversion, and takes on values 'across_ori', 'across_dif', 'intra_replichore'. length : Length of the inversion in bp. symmetry_percent : The percent of the total length of the inversion contained in the longer arm. For a perfectly symmetric inversion, this value is 50 and gets larger as the inversion gets more asymmetric. It is never less than 50. data/11_annotated_boundaries/inversion_replichores_long.csv : a csv file that contains a list of all inversions across all assemblies. It contains the following fields: clone : Name of the assembly classification : Describes the type of inversion, and takes on values 'across_ori', 'across_dif', 'intra_replichore'. length : Length of the inversion in bp. mechanism : Putative mechanism of the inversion, and takes on values 'between_IS', 'IS_mediated' and 'other' See Predict SV mechanism above. symmetry_percent : The percent of the total length of the inversion contained in the longer arm. For a perfectly symmetric inversion, this value is 50 and gets larger as the inversion gets more asymmetric. It is never less than 50.","title":"Predict replichore and inversion balance"},{"location":"tutorial/","text":"Tutorial This is a tutorial with example data for seabreeze . Please install the software, create the conda enviroment and activate it first. To get started, navigate to the root of the seabreeze directory, and copy the example/ directory: cp -r example/ data/ The newly created data/ folder should look like this: |---data/ | | | |---data.csv | |---ori_dif_sequences.csv | |---02_genomes/ | | | | | |---REL606_evolved_1.fasta | | |---REL606_evolved_2.fasta | | |---REL606.fasta For this tutorial, structural variant mutations have been simulated on the E. coli strain REL606 genome using breseq . These mutated genome assemblies are REL606_evolved_1.fasta and REL606_evolved_2.fasta . We aim to identify the structural variants in these assemblies relative to their ancestor, REL606.fasta . These pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. For more information about the valid format of this file, please see the usage page. To view this csv file: cat data/data.csv It should look like this: assembly ancestor REL606 REL606 REL606_evolved_1 REL606 REL606_evolved_2 REL606 We include a comparison of REL606 to itself as a quality check step, as we do not expect any mutations when a genome is compared to itself. All of the following commands should be run from the seabreeze root directory. Here, 4 cores have been allocated to run seabreeze but this number can be higher on lower depending on your hardware. Analyse genome sizes This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores 4 analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see output for more information about the fields in this table. This table should look this this: assembly ancestor size_assembly size_ancestor difference percent_change REL606 REL606 4629812 4629812 0 0.0 REL606_evolved_1 REL606 4617111 4629812 -12701 -0.2743 REL606_evolved_2 REL606 4549910 4629812 -79902 -1.7258 As we expected, there is no size difference when REL606 is compared to itself. We can see that both of the assemblies REL606_evolved_1 and REL606_evolved_2 are smaller than the ancestor. Find insertion sequences This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores 4 predict_IS_elements All of the output generated is stored in data/05_isescan_tables/ . This tutorial should generate the following files in this directory: |---data/ | |---05_isescan_tables/ | | | | | |---REL606.csv | | |---REL606_evolved_1.csv | | |---REL606_evolved_2.csv | | |---REL606/ | | |---REL606_evolved_1/ | | |---REL606_evolved_2/ Each assembly has a .csv file that describes the locations of IS elements in that genome, and a directory where the additionally files generated by ISEScan are made. For information about interpreting this csv file, we refer users to the official ISEScan documentation . Predict SVs This command aligns the assembly-ancestor pairs, predicts structural variants and generates synteny plots. snakemake --use-conda --cores 4 predict_structural_variants This will generate the following directories: |---data/ | |---06_nucmer_alignment/ | | | | | |---REL606/ | | |---REL606_evolved_1/ | | |---REL606_evolved_2/ | | | | |---07_syri_output/ | | | | | |---REL606/ | | |---REL606_evolved_1/ | | |---REL606_evolved_2/ We are primarily interested in a table describing the SVs and the synteny plot. This command also generates other files that may be useful, but are not required. Please see output for information about those files. Let's look at the SVs for REL606_evolved_1 cd data/07_syri_output/REL606_evolved_1 cat REL606_evolved_1_clean.syri.out | cut --complement -f 4-5 This command prints the tsv file REL606_evolved_1_clean.syri.out to the terminal, while hiding the 4th and 5th columns. These columns show the reference/query sequences for indels, and hence can be quite large. Note that older versions of the UNIX cut command may not support the --complement option, and you may need to either update cut or use other UNIX commands to hide the 4th and 5th columns. You can also view this file with a spreadsheet application, as it a tsv file. genome 1 590471 genome 1 595344 SYN1 - SYN - genome 590473 599656 genome 595344 595344 DEL - DEL - genome 599657 700001 genome 595345 697137 SYN5 - SYN - genome 699997 2100900 genome 697133 2105267 INV15 - INV - genome 2100896 2775884 genome 2105263 2784492 SYN7 - SYN - genome 2775970 2789333 genome 2784492 2784492 DEL - DEL - genome 2789334 3697156 genome 2784487 3686254 SYN11 - SYN - genome 3002909 3008938 genome 2998062 2998062 DEL6 SYN11 DEL - genome 3697154 4415713 genome 3687698 4400119 SYN12 - SYN - genome 3894996 3901133 genome 3885540 3885540 DEL7 SYN12 DEL - genome 4415710 4629812 genome 4401562 4617111 SYN13 - SYN - genome 4615673 4629812 genome 4602972 4617111 SYN14 - SYN - We refer the user to the official SyRI documentation for information on interpreting this table. You may notice that the reference and query chromosome ID may read as \"genome\". This is because SyRI attempts to call variants between homologous chromosomes, and hence expects the reference and query ID to be the same string. To prevent this error from occurring, the genomes are renamed to a placeholder string 'genome'. Let us view the synteny plot REL606_evolved_1.plot.2.pdf in this same directory. It can be opened with any application that allows you to view a PDF. The ancestor genome is the blue line, and the orange line is the evolved genome REL606_evolved_1. The grey ribbons show syntenic regions. We can see that there was one large inversion (in yellow) and several smaller deletions across the genome (in red). One of the steps that seabreeze performs is to remove false positive SV calls and misassigned SVs. As an example of what this synteny plot looks like before this processing, we can view the plot REL606_evolved_1.plot.pdf Two deletions (~0.5Mb and ~2.8Mb) were not correctly called. There also appear to be many small \"duplications\". These correspond to spurious alignments between the many copies of IS elements, and do not always represent bona fide instances of structural variant mutations. It should also be noted that seabreeze does not track IS transposition events. Annotate genes in SVs To annotate the genes present in the deletions, inversions and amplifications, run this command. Make sure you navigate back to the seabreeze root directory before that. snakemake --use-conda --cores 4 annotate_SV_regions The primary output generated by this command are a series of html files in |---data/ | |---12_genome_diff_tables | | |---html | | | |---REL606.html | | | |---REL606_evolved_1.html | | | |---REL606_evolved_2.html Let us look at REL606_evolved_1.html as an example. This file can be opened by your web browser application. This table describes the mutations, their type, location and the genes present in them. For more information on this table, please see breseq documentation . Predict SV mechanism Most structural variant mutations occur through recombination between homologous sites and insertion sequences in particular are often involved. This command annotates the insertion sequences at the boundaries of structural variants (for deletions and inversions only) and predicts putative mechanisms. snakemake --use-conda --cores 4 predict_SV_mechanism This command generates several files: two summary files deletion_mechanism.csv and inversion_mechanism.csv , and three files for each of the three assemblies: |---data/ | |---11_annotated_boundaries | | |---deletion_mechanism.csv | | |---inversion_mechanism.csv | | |---REL606_boundaries.csv | | |---REL606_deletion.csv | | |---REL606_inversion.csv | | |---REL606_evolved_1_boundaries.csv | | |---REL606_evolved_1_deletion.csv | | |---REL606_evolved_1_inversion.csv | | |---REL606_evolved_2_boundaries.csv | | |---REL606_evolved_2_deletion.csv | | |---REL606_evolved_2_inversion.csv Let's look at the output for the assembly REL606_evolved_1_deletion.csv , which describes the putative mechanism of the deletions: ref_start ref_stop query_start query_stop tag_3 L_ref L_ref_distance R_ref R_ref_distance L_query L_query_distance R_query R_query_distance Mechanism Evidence 590473 599656 595344 595344 DEL 0 0 0 0 other NA 2775970 2789333 2784492 2784492 DEL 0 0 IS3_61 -7 IS3_61 7 IS_mediated evolved 3002909 3008938 2998062 2998062 DEL 0 0 0 0 other NA 3894996 3901133 3885540 3885540 DEL IS3_61 0 0 IS3_61 0 IS3_61 0 IS_mediated full We see that two deletions seem to involve IS3_61. For more information about this table, please see the output documentation . Now let us look at the output for the assembly REL606_evolved_1_inversion.csv , which describes the putative mechanism of the inversions: ref_start ref_stop query_start query_stop tag_3 L_ref L_ref_distance R_ref R_ref_distance L_query L_query_distance R_query R_query_distance Mechanism Evidence 699997 2100900 697133 2105267 INV 0 0 0 0 other NA There was only a single inversion in this assembly, which occurred by an unknown mechanism seabreeze could not predict. Looking at the summary file deletion_mechnism.csv , we can at a glance look at the mechanism for deletions in all of the assemblies: clone total between_IS IS_mediated other REL606 0 0 0 0 REL606_evolved_2 4 0 1 3 REL606_evolved_1 4 0 2 2 Similarly, for the inversions in inversion_mechanism.csv : clone total between_IS IS_mediated other REL606 0 0 0 0 REL606_evolved_2 2 1 0 1 REL606_evolved_1 1 0 0 1 Predict replichore and inversion balance For bacterial genomes that have a single origin and terminus, the genome can be divided into two replichores (halves) demarcated by the origin-terminus axis. It can be useful to know how the lengths of these two replichores differ between the ancestor-assembly pairs. In this figure, the two replichores have been depicted in yellow and green. The origin-terminus axis can also be used to classify inversions as inter-replichore (if they occur across the axis) or intra-replichore if they are contained within a single replichore. This figure depicts an inter-replichore inversion across the origin, and an intra-replichore inversion within the green replichore. For inter-replichore inversions, we can describe the symmetry of the inversion across the axis. Asymmetric inversions can cause the length of the two replichores to change. This step requires user input (in addition to data/data.csv ) to specify the sequences of the origin and terminus. For the origin, we recommend the oriC sequence, and for the terminus, we recommend the dif sequence. seabreeze looks for these sequences (or the reverse complement) in the genome for an exact and unique match, and will cause an error if an exact match is not found, or more than one exact match is found. There is no minimum/maximum length requirements for the supplied oriC and dif sequences as long as they meet the above criteria. seabreeze requires these two sequences for each ancestor, and assumes that the sequences have not mutated in the corresponding ancestor. This information is specified in a csv file in data/ori_dif_sequences.csv . Let us view this file for our example: cat data/ori_dif_sequences.csv We should be able to see this table: ancestor ori dif REL606 GGATCCTGGGTATTAAAA TCTTCCTTGGTTTATATT These sequences are the first few bases of the oriC and dif loci for E. coli . More information about what sequences are acceptable in this table are on the usage page. We can now run the command from the seabreeze root directory: snakemake --use-conda --cores 4 predict_replichore_balance This step generates several output files. First, let us look at the file that describes the lengths of the replichores in the assemblies data/08_reindex_genome_oric/replichore_arms.csv . clone ori dif length arm_1 arm_2 ratio percent REL606 0.0 2311092.0 4629812.0 2311092.0 2318720.0 1.003 50.082 REL606_evolved_1 0.0 1972601.0 4617111.0 1972601.0 2644510.0 1.341 57.276 REL606_evolved_2 0.0 1708781.0 4549910.0 1708781.0 2841129.0 1.663 62.444 For more information, about this table, please see the output page. arm_1 and arm_2 describe the length of the two replichores, and percent describes the percent of the total length of the genome that is in the longer replichore. This value is 50 for a perfectly balanced genome, and increases with increasing imbalance. We can see that both REL606_evolved_1 and REL606_evolved_2 are less balanced than REL606 . Now, let's look at the classification of the inversions in the assemblies in data/11_annotated_boundaries/inversion_replichores_long.csv . This file contains a list of all of the inversions across all of the assemblies. clone classification length mechanism symmetry_percent REL606_evolved_2 across_dif 1500794 other 75.52768734416581 REL606_evolved_2 across_ori 1070041 between_IS 57.700686235387245 REL606_evolved_1 across_dif 1400903 other 61.914707870566346 We can see that the assembly REL606_evolved_2 had two inversions, one across the terminus and one across the origin, while REL606_evolved_1 had only one inversion across the terminus. The symmetry of each of these inversions is described by the symmetry_percent field, which is the percent of the total length of the inversion that is in the longer arm of the inversion. This value is 50 for a perfectly symmetric inversion and becomes larger as the inversion becomes more asymmetric.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This is a tutorial with example data for seabreeze . Please install the software, create the conda enviroment and activate it first. To get started, navigate to the root of the seabreeze directory, and copy the example/ directory: cp -r example/ data/ The newly created data/ folder should look like this: |---data/ | | | |---data.csv | |---ori_dif_sequences.csv | |---02_genomes/ | | | | | |---REL606_evolved_1.fasta | | |---REL606_evolved_2.fasta | | |---REL606.fasta For this tutorial, structural variant mutations have been simulated on the E. coli strain REL606 genome using breseq . These mutated genome assemblies are REL606_evolved_1.fasta and REL606_evolved_2.fasta . We aim to identify the structural variants in these assemblies relative to their ancestor, REL606.fasta . These pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. For more information about the valid format of this file, please see the usage page. To view this csv file: cat data/data.csv It should look like this: assembly ancestor REL606 REL606 REL606_evolved_1 REL606 REL606_evolved_2 REL606 We include a comparison of REL606 to itself as a quality check step, as we do not expect any mutations when a genome is compared to itself. All of the following commands should be run from the seabreeze root directory. Here, 4 cores have been allocated to run seabreeze but this number can be higher on lower depending on your hardware.","title":"Tutorial"},{"location":"tutorial/#analyse-genome-sizes","text":"This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores 4 analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see output for more information about the fields in this table. This table should look this this: assembly ancestor size_assembly size_ancestor difference percent_change REL606 REL606 4629812 4629812 0 0.0 REL606_evolved_1 REL606 4617111 4629812 -12701 -0.2743 REL606_evolved_2 REL606 4549910 4629812 -79902 -1.7258 As we expected, there is no size difference when REL606 is compared to itself. We can see that both of the assemblies REL606_evolved_1 and REL606_evolved_2 are smaller than the ancestor.","title":"Analyse genome sizes"},{"location":"tutorial/#find-insertion-sequences","text":"This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores 4 predict_IS_elements All of the output generated is stored in data/05_isescan_tables/ . This tutorial should generate the following files in this directory: |---data/ | |---05_isescan_tables/ | | | | | |---REL606.csv | | |---REL606_evolved_1.csv | | |---REL606_evolved_2.csv | | |---REL606/ | | |---REL606_evolved_1/ | | |---REL606_evolved_2/ Each assembly has a .csv file that describes the locations of IS elements in that genome, and a directory where the additionally files generated by ISEScan are made. For information about interpreting this csv file, we refer users to the official ISEScan documentation .","title":"Find insertion sequences"},{"location":"tutorial/#predict-svs","text":"This command aligns the assembly-ancestor pairs, predicts structural variants and generates synteny plots. snakemake --use-conda --cores 4 predict_structural_variants This will generate the following directories: |---data/ | |---06_nucmer_alignment/ | | | | | |---REL606/ | | |---REL606_evolved_1/ | | |---REL606_evolved_2/ | | | | |---07_syri_output/ | | | | | |---REL606/ | | |---REL606_evolved_1/ | | |---REL606_evolved_2/ We are primarily interested in a table describing the SVs and the synteny plot. This command also generates other files that may be useful, but are not required. Please see output for information about those files. Let's look at the SVs for REL606_evolved_1 cd data/07_syri_output/REL606_evolved_1 cat REL606_evolved_1_clean.syri.out | cut --complement -f 4-5 This command prints the tsv file REL606_evolved_1_clean.syri.out to the terminal, while hiding the 4th and 5th columns. These columns show the reference/query sequences for indels, and hence can be quite large. Note that older versions of the UNIX cut command may not support the --complement option, and you may need to either update cut or use other UNIX commands to hide the 4th and 5th columns. You can also view this file with a spreadsheet application, as it a tsv file. genome 1 590471 genome 1 595344 SYN1 - SYN - genome 590473 599656 genome 595344 595344 DEL - DEL - genome 599657 700001 genome 595345 697137 SYN5 - SYN - genome 699997 2100900 genome 697133 2105267 INV15 - INV - genome 2100896 2775884 genome 2105263 2784492 SYN7 - SYN - genome 2775970 2789333 genome 2784492 2784492 DEL - DEL - genome 2789334 3697156 genome 2784487 3686254 SYN11 - SYN - genome 3002909 3008938 genome 2998062 2998062 DEL6 SYN11 DEL - genome 3697154 4415713 genome 3687698 4400119 SYN12 - SYN - genome 3894996 3901133 genome 3885540 3885540 DEL7 SYN12 DEL - genome 4415710 4629812 genome 4401562 4617111 SYN13 - SYN - genome 4615673 4629812 genome 4602972 4617111 SYN14 - SYN - We refer the user to the official SyRI documentation for information on interpreting this table. You may notice that the reference and query chromosome ID may read as \"genome\". This is because SyRI attempts to call variants between homologous chromosomes, and hence expects the reference and query ID to be the same string. To prevent this error from occurring, the genomes are renamed to a placeholder string 'genome'. Let us view the synteny plot REL606_evolved_1.plot.2.pdf in this same directory. It can be opened with any application that allows you to view a PDF. The ancestor genome is the blue line, and the orange line is the evolved genome REL606_evolved_1. The grey ribbons show syntenic regions. We can see that there was one large inversion (in yellow) and several smaller deletions across the genome (in red). One of the steps that seabreeze performs is to remove false positive SV calls and misassigned SVs. As an example of what this synteny plot looks like before this processing, we can view the plot REL606_evolved_1.plot.pdf Two deletions (~0.5Mb and ~2.8Mb) were not correctly called. There also appear to be many small \"duplications\". These correspond to spurious alignments between the many copies of IS elements, and do not always represent bona fide instances of structural variant mutations. It should also be noted that seabreeze does not track IS transposition events.","title":"Predict SVs"},{"location":"tutorial/#annotate-genes-in-svs","text":"To annotate the genes present in the deletions, inversions and amplifications, run this command. Make sure you navigate back to the seabreeze root directory before that. snakemake --use-conda --cores 4 annotate_SV_regions The primary output generated by this command are a series of html files in |---data/ | |---12_genome_diff_tables | | |---html | | | |---REL606.html | | | |---REL606_evolved_1.html | | | |---REL606_evolved_2.html Let us look at REL606_evolved_1.html as an example. This file can be opened by your web browser application. This table describes the mutations, their type, location and the genes present in them. For more information on this table, please see breseq documentation .","title":"Annotate genes in SVs"},{"location":"tutorial/#predict-sv-mechanism","text":"Most structural variant mutations occur through recombination between homologous sites and insertion sequences in particular are often involved. This command annotates the insertion sequences at the boundaries of structural variants (for deletions and inversions only) and predicts putative mechanisms. snakemake --use-conda --cores 4 predict_SV_mechanism This command generates several files: two summary files deletion_mechanism.csv and inversion_mechanism.csv , and three files for each of the three assemblies: |---data/ | |---11_annotated_boundaries | | |---deletion_mechanism.csv | | |---inversion_mechanism.csv | | |---REL606_boundaries.csv | | |---REL606_deletion.csv | | |---REL606_inversion.csv | | |---REL606_evolved_1_boundaries.csv | | |---REL606_evolved_1_deletion.csv | | |---REL606_evolved_1_inversion.csv | | |---REL606_evolved_2_boundaries.csv | | |---REL606_evolved_2_deletion.csv | | |---REL606_evolved_2_inversion.csv Let's look at the output for the assembly REL606_evolved_1_deletion.csv , which describes the putative mechanism of the deletions: ref_start ref_stop query_start query_stop tag_3 L_ref L_ref_distance R_ref R_ref_distance L_query L_query_distance R_query R_query_distance Mechanism Evidence 590473 599656 595344 595344 DEL 0 0 0 0 other NA 2775970 2789333 2784492 2784492 DEL 0 0 IS3_61 -7 IS3_61 7 IS_mediated evolved 3002909 3008938 2998062 2998062 DEL 0 0 0 0 other NA 3894996 3901133 3885540 3885540 DEL IS3_61 0 0 IS3_61 0 IS3_61 0 IS_mediated full We see that two deletions seem to involve IS3_61. For more information about this table, please see the output documentation . Now let us look at the output for the assembly REL606_evolved_1_inversion.csv , which describes the putative mechanism of the inversions: ref_start ref_stop query_start query_stop tag_3 L_ref L_ref_distance R_ref R_ref_distance L_query L_query_distance R_query R_query_distance Mechanism Evidence 699997 2100900 697133 2105267 INV 0 0 0 0 other NA There was only a single inversion in this assembly, which occurred by an unknown mechanism seabreeze could not predict. Looking at the summary file deletion_mechnism.csv , we can at a glance look at the mechanism for deletions in all of the assemblies: clone total between_IS IS_mediated other REL606 0 0 0 0 REL606_evolved_2 4 0 1 3 REL606_evolved_1 4 0 2 2 Similarly, for the inversions in inversion_mechanism.csv : clone total between_IS IS_mediated other REL606 0 0 0 0 REL606_evolved_2 2 1 0 1 REL606_evolved_1 1 0 0 1","title":"Predict SV mechanism"},{"location":"tutorial/#predict-replichore-and-inversion-balance","text":"For bacterial genomes that have a single origin and terminus, the genome can be divided into two replichores (halves) demarcated by the origin-terminus axis. It can be useful to know how the lengths of these two replichores differ between the ancestor-assembly pairs. In this figure, the two replichores have been depicted in yellow and green. The origin-terminus axis can also be used to classify inversions as inter-replichore (if they occur across the axis) or intra-replichore if they are contained within a single replichore. This figure depicts an inter-replichore inversion across the origin, and an intra-replichore inversion within the green replichore. For inter-replichore inversions, we can describe the symmetry of the inversion across the axis. Asymmetric inversions can cause the length of the two replichores to change. This step requires user input (in addition to data/data.csv ) to specify the sequences of the origin and terminus. For the origin, we recommend the oriC sequence, and for the terminus, we recommend the dif sequence. seabreeze looks for these sequences (or the reverse complement) in the genome for an exact and unique match, and will cause an error if an exact match is not found, or more than one exact match is found. There is no minimum/maximum length requirements for the supplied oriC and dif sequences as long as they meet the above criteria. seabreeze requires these two sequences for each ancestor, and assumes that the sequences have not mutated in the corresponding ancestor. This information is specified in a csv file in data/ori_dif_sequences.csv . Let us view this file for our example: cat data/ori_dif_sequences.csv We should be able to see this table: ancestor ori dif REL606 GGATCCTGGGTATTAAAA TCTTCCTTGGTTTATATT These sequences are the first few bases of the oriC and dif loci for E. coli . More information about what sequences are acceptable in this table are on the usage page. We can now run the command from the seabreeze root directory: snakemake --use-conda --cores 4 predict_replichore_balance This step generates several output files. First, let us look at the file that describes the lengths of the replichores in the assemblies data/08_reindex_genome_oric/replichore_arms.csv . clone ori dif length arm_1 arm_2 ratio percent REL606 0.0 2311092.0 4629812.0 2311092.0 2318720.0 1.003 50.082 REL606_evolved_1 0.0 1972601.0 4617111.0 1972601.0 2644510.0 1.341 57.276 REL606_evolved_2 0.0 1708781.0 4549910.0 1708781.0 2841129.0 1.663 62.444 For more information, about this table, please see the output page. arm_1 and arm_2 describe the length of the two replichores, and percent describes the percent of the total length of the genome that is in the longer replichore. This value is 50 for a perfectly balanced genome, and increases with increasing imbalance. We can see that both REL606_evolved_1 and REL606_evolved_2 are less balanced than REL606 . Now, let's look at the classification of the inversions in the assemblies in data/11_annotated_boundaries/inversion_replichores_long.csv . This file contains a list of all of the inversions across all of the assemblies. clone classification length mechanism symmetry_percent REL606_evolved_2 across_dif 1500794 other 75.52768734416581 REL606_evolved_2 across_ori 1070041 between_IS 57.700686235387245 REL606_evolved_1 across_dif 1400903 other 61.914707870566346 We can see that the assembly REL606_evolved_2 had two inversions, one across the terminus and one across the origin, while REL606_evolved_1 had only one inversion across the terminus. The symmetry of each of these inversions is described by the symmetry_percent field, which is the percent of the total length of the inversion that is in the longer arm of the inversion. This value is 50 for a perfectly symmetric inversion and becomes larger as the inversion becomes more asymmetric.","title":"Predict replichore and inversion balance"},{"location":"usage/","text":"Preparing input Assuming you have completed installation , you can now prepare input files for analysis. At its core, seabreeze is designed for bacterial resequencing experiments, and therefore predicts mutations between reference-query pairs, where the reference sequence is referred to as an ancestor and the query sequence being compared to is called the assembly . This nomenclature is use throughout the documentation and the software. seabreeze requires FASTA files for all of the bacterial genomes being analysed. These FASTA files should only contain a single contig for the full-length genome. It should not contain additional entries for plasmids. seabreeze works best with genome assemblies generated from long-read sequencing as these can capture structural variants that occur between repeat sequences. It also does not work well for comparing genomes with high sequence/ phylogenetic divergence (for example between different bacterial species). All of the input/output of the analysis is stored in the data/ directory in the seabreeze folder. The pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. This file has only two columns ancestor and assembly , in a standard csv format. Populate the csv file with the ancestor-assembly pairs you wish to analyse. For example: assembly ancestor genome1 genome2 genome3 genome4 Place the corresponding FASTA files for these genomes in 02_genomes . seabreeze expects that these file names to match, and contain the extension .fasta . Therefore, for this example, the data/ directory should look like this: seabreeze | |---data/ | | | |---data.csv | |---02_genomes/ | | | | | |---genome1.fasta | | |---genome2.fasta | | |---genome3.fasta | | |---genome4.fasta Note that many assemblies can use the same ancestor, but the same assembly cannot use many ancestors: For example, this is fine: assembly ancestor genome1 genome2 genome3 genome2 This will cause a fatal error: assembly ancestor genome1 genome2 genome1 genome3 It is also a good idea to set up a comparison of the ancestor genomes to themselves. This can be a quality control step, as we do not expect the pipeline to predict any mutations in a genome relative to itself. The following table demonstrates an implementation of this: assembly ancestor genome1 genome2 genome3 genome4 genome2 genome2 genome4 genome4 Some commands ahead may require additional input, and will be specified in respective sections. Commands All of the seabreeze commands take the following format and should be executed from the seabreeze root directory: snakemake --use-conda --cores n <command> Where n is the number of cores to be used to execute the command. Following sections describe commands that can be used. Additional flags can be added to commands and are detailed in 'Additional Options'. Analyse genome sizes This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores n analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see output for more information about the fields in this table, and the tutorial for a sample. Find insertion sequences This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores n predict_IS_elements This command primarily generates a series of csv files data/05_isescan_tables/<assembly>.csv , with each csv file corresponding to an assembly in data/data.csv . ISEScan also generates additional output for each assembly, which is stored in their respective directories data/05_iescan_tables/<assembly>/ . For information about interpreting this csv file, we refer users to the official ISEScan documentation . Predict SVs This command aligns the assembly-ancestor pairs, predicts structural variants and generates synteny plots. snakemake --use-conda --cores n predict_structural_variants data/07_syri_output/<assembly>/<assembly>_clean.syri.out is a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. data/07_syri_output/<assembly>/<assembly>.plot.2.pdf is a synteny plot of the rearrangements in the above tsv file. This command also generates other files. Please see the output page. Tip: The 4th and 5th columns of the <assembly>_clean.syri.out file have the reference/query sequences for indels. For large deletions, these field can have thousands of bases. To view this tsv file in the terminal without these columns, try running this command. Note that older versions of the UNIX cut command may not support the --complement option, and you may need to either update cut or use other UNIX commands to hide the 4th and 5th columns. cat <assembly>_clean.syri.out | cut --complement -f 4-5 Annotate genes in SVs This command uses prokka annotate the assemblies and breseq to annotate the genes present in the deletions, inversions and amplifications. snakemake --use-conda --cores n annotate_SV_regions For each assembly, an HTML table data/12_genome_diff_tables/html/<assembly>.html . Please see the breseq manual for information on interpreting this table. For a sample table, please see the tutorial . Predict SV mechanism Most structural variant mutations occur through recombination between homologous sites and insertion sequences in particular are often involved. This command annotates the insertion sequences at the boundaries of structural variants (for deletions and inversions only) and predicts putative mechanisms. snakamake --use-conda --cores n predict_SV_mechanism This command generates two summary csv files: data/11_annotated_boundaries/deletion_mechanism.csv and data/11_annotated_boundaries/inversion_mechanism.csv that contain information about the mechanism of deletions and inversions respectively, for all of the assemblies. Detailed information about the mechanism of each deletion for every assembly is in the csv files data/11_annotated_boundaries/<assembly>_deletion.csv Detailed information about the mechanism of each inversion for every assembly is in the csv files data/11_annotated_boundaries/<assembly>_inversion.csv Information about these csv files can be found on the output page and examples on the tutorial page. Predict replichore and inversion balance For bacterial genomes that have a single origin and terminus, the genome can be divided into two replichores (halves) demarcated by the origin-terminus axis. It can be useful to know how the lengths of these two replichores differ between the ancestor-assembly pairs. The origin-terminus axis can also be used to classify inversions as inter-replichore or intra-replichore, and the symmetry of inter-replichore inversions about the origin-terminus axis can be measured. For an illustration explaining this, please see the tutorial . This step requires user input (in addition to data/data.csv ) to specify the sequences of the origin and terminus. For the origin, we recommend the oriC sequence, and for the terminus, we recommend the dif sequence. seabreeze looks for these sequences (or the reverse complement) in the genome for an exact and unique match, and will cause an error if an exact match is not found, or more than one exact match is found. There is no minimum/maximum length requirements for the supplied oriC and dif sequences as long as they meet the above criteria. seabreeze requires these two sequences for each ancestor, and assumes that the sequences have not mutated in the corresponding ancestor. This information is specified in a csv file in data/ori_dif_sequences.csv . This csv file has three columns: ancestor : name of the ancestor, which matches the name in data/data.csv . It should not contain the .fasta extension. ori : base sequence of the oriC locus, in upper case with only the standard bases (A,T,G,C). dif : base sequence of the dif locus, in upper case with only the standard bases (A,T,G,C). For example, if this is the data/data.csv : assembly ancestor genome1 genome2 genome3 genome4 Then data/ori_dif_sequence.csv should look like this, with one entry per ancestor. The order of these rows does not matter, and each ancestor only requires one entry, even if it appears multiple times in data/data.csv . ancestor ori dif genome2 GGATCCTGGGTATTAAAA TCTTCCTTGGTTTATATT genome4 GTAGGATCCGTGATTAG AATCTGTCTCTGCACGTA With this csv file set up, this command can be run from the seabreeze root directory: snakemake --use-conda --cores n predict_replichore_balance This command produces the following output: - data/08_reindex_genome_oric/replichore_arms.csv : a csv file that describes the length of the two replichores for all of the assemblies - data/11_annotated_boundaries/inversion_replichores.csv : a csv file that tallies the count of each type of inversion (inter-replichore vs intra-replichore) for all of the assemblies. - data/11_annotated_boundaries/<assembly>_inversion_classification.csv : a csv file that has more detailed information about all of the inversions in a given assembly - data/11_annotated_boundaries/inversion_replichores_long.csv : a csv file that contains a list of all inversions across all assemblies Please see the output page for more information about these fields. Additional Snakemake options These are additional Snakemake options that can be included as follows. They work for all commands snakemake --use-conda --cores n <insert flag here> <command> -np : This flag performs a 'dry-run' of the command i.e. it checks to see that all of the input files necessary for that command are present, or can be generated by seabreeze . It can helpful to run this before a computationally expensive step such as predicting IS elements, or predicting SVs. If a command was terminated before it was completed, Snakemake may prompt you to use these flags when you run the same command again: --unlock : Snakemake will \"lock\" a directory if all of the output files were not completed before the processes were terminated. Use this flag to unlock the directory. --rerun-incomplete : To allow Snakemake to remake any output files that were not completed in the prior run.","title":"Usage"},{"location":"usage/#preparing-input","text":"Assuming you have completed installation , you can now prepare input files for analysis. At its core, seabreeze is designed for bacterial resequencing experiments, and therefore predicts mutations between reference-query pairs, where the reference sequence is referred to as an ancestor and the query sequence being compared to is called the assembly . This nomenclature is use throughout the documentation and the software. seabreeze requires FASTA files for all of the bacterial genomes being analysed. These FASTA files should only contain a single contig for the full-length genome. It should not contain additional entries for plasmids. seabreeze works best with genome assemblies generated from long-read sequencing as these can capture structural variants that occur between repeat sequences. It also does not work well for comparing genomes with high sequence/ phylogenetic divergence (for example between different bacterial species). All of the input/output of the analysis is stored in the data/ directory in the seabreeze folder. The pairwise comparisons to be performed are specified in a csv file called data.csv in the data/ directory. This file has only two columns ancestor and assembly , in a standard csv format. Populate the csv file with the ancestor-assembly pairs you wish to analyse. For example: assembly ancestor genome1 genome2 genome3 genome4 Place the corresponding FASTA files for these genomes in 02_genomes . seabreeze expects that these file names to match, and contain the extension .fasta . Therefore, for this example, the data/ directory should look like this: seabreeze | |---data/ | | | |---data.csv | |---02_genomes/ | | | | | |---genome1.fasta | | |---genome2.fasta | | |---genome3.fasta | | |---genome4.fasta Note that many assemblies can use the same ancestor, but the same assembly cannot use many ancestors: For example, this is fine: assembly ancestor genome1 genome2 genome3 genome2 This will cause a fatal error: assembly ancestor genome1 genome2 genome1 genome3 It is also a good idea to set up a comparison of the ancestor genomes to themselves. This can be a quality control step, as we do not expect the pipeline to predict any mutations in a genome relative to itself. The following table demonstrates an implementation of this: assembly ancestor genome1 genome2 genome3 genome4 genome2 genome2 genome4 genome4 Some commands ahead may require additional input, and will be specified in respective sections.","title":"Preparing input"},{"location":"usage/#commands","text":"All of the seabreeze commands take the following format and should be executed from the seabreeze root directory: snakemake --use-conda --cores n <command> Where n is the number of cores to be used to execute the command. Following sections describe commands that can be used. Additional flags can be added to commands and are detailed in 'Additional Options'.","title":"Commands"},{"location":"usage/#analyse-genome-sizes","text":"This command compares the sizes of the assemblies to their specified ancestors in a pairwise manner. snakemake --use-conda --cores n analyse_genome_sizes The output file generated is data/04_rename_genome/genome_size_stats.csv . Please see output for more information about the fields in this table, and the tutorial for a sample.","title":"Analyse genome sizes"},{"location":"usage/#find-insertion-sequences","text":"This command uses ISEscan to annotate partial and full-length IS elements in the genomes. snakemake --use-conda --cores n predict_IS_elements This command primarily generates a series of csv files data/05_isescan_tables/<assembly>.csv , with each csv file corresponding to an assembly in data/data.csv . ISEScan also generates additional output for each assembly, which is stored in their respective directories data/05_iescan_tables/<assembly>/ . For information about interpreting this csv file, we refer users to the official ISEScan documentation .","title":"Find insertion sequences"},{"location":"usage/#predict-svs","text":"This command aligns the assembly-ancestor pairs, predicts structural variants and generates synteny plots. snakemake --use-conda --cores n predict_structural_variants data/07_syri_output/<assembly>/<assembly>_clean.syri.out is a tsv file that describes the location and type of SVs in the assembly, relative to its ancestor. We refer the user to the official SyRI documentation for information on interpreting this table. data/07_syri_output/<assembly>/<assembly>.plot.2.pdf is a synteny plot of the rearrangements in the above tsv file. This command also generates other files. Please see the output page. Tip: The 4th and 5th columns of the <assembly>_clean.syri.out file have the reference/query sequences for indels. For large deletions, these field can have thousands of bases. To view this tsv file in the terminal without these columns, try running this command. Note that older versions of the UNIX cut command may not support the --complement option, and you may need to either update cut or use other UNIX commands to hide the 4th and 5th columns. cat <assembly>_clean.syri.out | cut --complement -f 4-5","title":"Predict SVs"},{"location":"usage/#annotate-genes-in-svs","text":"This command uses prokka annotate the assemblies and breseq to annotate the genes present in the deletions, inversions and amplifications. snakemake --use-conda --cores n annotate_SV_regions For each assembly, an HTML table data/12_genome_diff_tables/html/<assembly>.html . Please see the breseq manual for information on interpreting this table. For a sample table, please see the tutorial .","title":"Annotate genes in SVs"},{"location":"usage/#predict-sv-mechanism","text":"Most structural variant mutations occur through recombination between homologous sites and insertion sequences in particular are often involved. This command annotates the insertion sequences at the boundaries of structural variants (for deletions and inversions only) and predicts putative mechanisms. snakamake --use-conda --cores n predict_SV_mechanism This command generates two summary csv files: data/11_annotated_boundaries/deletion_mechanism.csv and data/11_annotated_boundaries/inversion_mechanism.csv that contain information about the mechanism of deletions and inversions respectively, for all of the assemblies. Detailed information about the mechanism of each deletion for every assembly is in the csv files data/11_annotated_boundaries/<assembly>_deletion.csv Detailed information about the mechanism of each inversion for every assembly is in the csv files data/11_annotated_boundaries/<assembly>_inversion.csv Information about these csv files can be found on the output page and examples on the tutorial page.","title":"Predict SV mechanism"},{"location":"usage/#predict-replichore-and-inversion-balance","text":"For bacterial genomes that have a single origin and terminus, the genome can be divided into two replichores (halves) demarcated by the origin-terminus axis. It can be useful to know how the lengths of these two replichores differ between the ancestor-assembly pairs. The origin-terminus axis can also be used to classify inversions as inter-replichore or intra-replichore, and the symmetry of inter-replichore inversions about the origin-terminus axis can be measured. For an illustration explaining this, please see the tutorial . This step requires user input (in addition to data/data.csv ) to specify the sequences of the origin and terminus. For the origin, we recommend the oriC sequence, and for the terminus, we recommend the dif sequence. seabreeze looks for these sequences (or the reverse complement) in the genome for an exact and unique match, and will cause an error if an exact match is not found, or more than one exact match is found. There is no minimum/maximum length requirements for the supplied oriC and dif sequences as long as they meet the above criteria. seabreeze requires these two sequences for each ancestor, and assumes that the sequences have not mutated in the corresponding ancestor. This information is specified in a csv file in data/ori_dif_sequences.csv . This csv file has three columns: ancestor : name of the ancestor, which matches the name in data/data.csv . It should not contain the .fasta extension. ori : base sequence of the oriC locus, in upper case with only the standard bases (A,T,G,C). dif : base sequence of the dif locus, in upper case with only the standard bases (A,T,G,C). For example, if this is the data/data.csv : assembly ancestor genome1 genome2 genome3 genome4 Then data/ori_dif_sequence.csv should look like this, with one entry per ancestor. The order of these rows does not matter, and each ancestor only requires one entry, even if it appears multiple times in data/data.csv . ancestor ori dif genome2 GGATCCTGGGTATTAAAA TCTTCCTTGGTTTATATT genome4 GTAGGATCCGTGATTAG AATCTGTCTCTGCACGTA With this csv file set up, this command can be run from the seabreeze root directory: snakemake --use-conda --cores n predict_replichore_balance This command produces the following output: - data/08_reindex_genome_oric/replichore_arms.csv : a csv file that describes the length of the two replichores for all of the assemblies - data/11_annotated_boundaries/inversion_replichores.csv : a csv file that tallies the count of each type of inversion (inter-replichore vs intra-replichore) for all of the assemblies. - data/11_annotated_boundaries/<assembly>_inversion_classification.csv : a csv file that has more detailed information about all of the inversions in a given assembly - data/11_annotated_boundaries/inversion_replichores_long.csv : a csv file that contains a list of all inversions across all assemblies Please see the output page for more information about these fields.","title":"Predict replichore and inversion balance"},{"location":"usage/#additional-snakemake-options","text":"These are additional Snakemake options that can be included as follows. They work for all commands snakemake --use-conda --cores n <insert flag here> <command> -np : This flag performs a 'dry-run' of the command i.e. it checks to see that all of the input files necessary for that command are present, or can be generated by seabreeze . It can helpful to run this before a computationally expensive step such as predicting IS elements, or predicting SVs. If a command was terminated before it was completed, Snakemake may prompt you to use these flags when you run the same command again: --unlock : Snakemake will \"lock\" a directory if all of the output files were not completed before the processes were terminated. Use this flag to unlock the directory. --rerun-incomplete : To allow Snakemake to remake any output files that were not completed in the prior run.","title":"Additional Snakemake options"}]}